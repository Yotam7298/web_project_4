!function(){"use strict";class e{constructor(e,t,s,r,n,o){this._title=e.name,this._link=e.link,this._cardId=e._id,this._likes=e.likes,this._owner=e.owner,this._userId=s,this._selector=t,this._handleCardClick=r,this._handleRemoveElement=n,this._handleLikeClick=o}_getTemplate(){return document.querySelector("#element").content.querySelector(this._selector).cloneNode(!0)}_setEventListeners(){const e=this._element.querySelector(".element__remove-button"),t=this._element.querySelector(".element__image"),s=this._element.querySelector(".element__like-button");this._element.addEventListener("click",(r=>{switch(r.target){case e:this._handleRemoveElement(r);break;case t:this._handleCardClick(r);break;case s:this._handleLikeClick(r)}}))}isLiked(){return this._likes.some((e=>e._id===this._userId))}_renderLikes(){const e=this._element.querySelector(".element__like-counter"),t=this._element.querySelector(".element__like-button");e.textContent=this._likes.length,this.isLiked()?t.classList.add("element__like-button_active"):t.classList.remove("element__like-button_active")}_renderDeleteButton(){const e=this._element.querySelector(".element__remove-button");this._owner._id===this._userId&&e.classList.add("element__remove-button_owner")}updateLikes(e){this._likes=e,this._renderLikes()}generateCard(){this._element=this._getTemplate(),this._element._id=this._cardId,this._element.owner=this._owner;const e=this._element.querySelector(".element__image"),t=this._element.querySelector(".element__caption-text"),s=this._element.querySelector(".element__like-counter");return this._setEventListeners(),this._renderLikes(),this._renderDeleteButton(),t.textContent=this._title,e.src=this._link,e.alt="Photo of ".concat(this._title),s.textContent=this._likes.length,this._element}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}resetValidation(){this._toggleButtonState(this._inputList,this._buttonElement),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputList,this._buttonElement)}))}))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_showInputError(e,t){const s=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_toggleButtonState(e,t){this._isFormInvalid(e)?(t.classList.add(this._inactiveButtonClass),t.disabled=!0):(t.classList.remove(this._inactiveButtonClass),t.disabled=!1)}_isFormInvalid(e){return e.some((e=>!e.validity.valid))}}class s{constructor(e){this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".close-button"),this.close=this.close.bind(this),this._handleClickClose=this._handleClickClose.bind(this),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}close(){this._popup.classList.remove("popup_opened"),this.removeEventListeners()}setEventListeners(){this._closeButton.addEventListener("click",this.close),this._popup.addEventListener("mousedown",this._handleClickClose),document.addEventListener("keydown",this._handleEscClose)}removeEventListeners(){this._closeButton.removeEventListener("click",this.close),this._popup.removeEventListener("mousedown",this._handleClickClose),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleClickClose(e){e.target===this._popup&&this.close()}}class r extends s{constructor(e,t){var s,r;super(e),r=e=>{const t=this._getInputValues();this._formSubmitHandler(e,t)},(s="_handleSubmit")in this?Object.defineProperty(this,s,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[s]=r,this._formSubmitHandler=t,this._popupForm=this._popup.querySelector(".form"),this._inputsArray=this._popup.querySelectorAll(".form__input")}_getInputValues(){const e={};return this._inputsArray.forEach((t=>{const s=t.id.split("-");e[s[0]]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._handleSubmit)}removeEventListeners(){super.removeEventListeners(),this._popupForm.removeEventListener("submit",this._handleSubmit)}close(){this._popupForm.reset(),this.removeEventListeners(),super.close()}}const n=document.querySelector(".profile__edit-button"),o={name:document.querySelector("#name-input"),about:document.querySelector("#about-input")},i=document.querySelector(".profile__avatar-edit"),a=document.querySelector(".profile__add-button"),l=(document.querySelector(".elements__list"),[]),c=Array.from(document.querySelectorAll(".form")),h={inputSelector:".form__input",submitButtonSelector:".form__save",inactiveButtonClass:"form__save_disabled",inputErrorClass:"form__input_invalid",errorClass:"form__input-error_active"};function u(){(function(e){const t=document.querySelector(".popup_opened").querySelector(".form").id;return l.find((e=>e.id===t)).validator})().resetValidation()}function _(e,t){const s=document.querySelector(t).querySelector("#popup-submit");e?s.textContent="Saving...":(t=".delete-popup")?s.textContent="Yes":s.textContent="Save"}const d=new class{constructor(e){this._options=e}_verifyResponse(e){return e.ok?e.json():Promise.reject(err)}reportError(e){console.log("Something went wrong, Error: ".concat(e.status))}_logInfo(e){console.log("Request was successful:"),console.log(e)}getAllInfo(){return Promise.all([this.getUserInfo(),this.loadCards()]).then((e=>e))}getUserInfo(){return fetch("".concat(this._options.baseUrl,"/users/me"),{headers:this._options.headers}).then(this._verifyResponse).then((e=>(this._logInfo(e),e)))}loadCards(){return fetch("".concat(this._options.baseUrl,"/cards"),{headers:this._options.headers}).then(this._verifyResponse).then((e=>(this._logInfo(e),e)))}editProfileInfo(e){return fetch("".concat(this._options.baseUrl,"/users/me"),{method:"PATCH",headers:this._options.headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._verifyResponse).then((e=>(this._logInfo(e),e)))}editProfilePicture(e){return fetch("".concat(this._options.baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._options.headers,body:JSON.stringify({avatar:e.avatar})}).then(this._verifyResponse).then((e=>(this._logInfo(e),e)))}addNewCard(e){return fetch("".concat(this._options.baseUrl,"/cards"),{method:"POST",headers:this._options.headers,body:JSON.stringify({name:e.title,link:e.link})}).then(this._verifyResponse).then((e=>(this._logInfo(e),e)))}deleteCard(e){return fetch("".concat(this._options.baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._options.headers}).then(this._verifyResponse).then((e=>{this._logInfo(e)}))}changeCardLike(e,t){return fetch("".concat(this._options.baseUrl,"/cards/likes/").concat(e),{method:t,headers:this._options.headers}).then(this._verifyResponse).then((e=>(this._logInfo(e),e)))}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"f800af66-4bca-42fd-8139-117d10b5a510","Content-Type":"application/json"}}),p=new class{constructor(e,t,s){this._userName=document.querySelector(e),this._userAbout=document.querySelector(t),this._userAvatar=document.querySelector(s)}getUserInfo(){const e={};return e.name=this._userName.textContent,e.about=this._userAbout.textContent,e}saveUserId(e){this._userId=e}getUserId(){return this._userId}setUserInfo(e){this._userName.textContent=e.name,this._userAbout.textContent=e.about}setUserAvatar(e){this._userAvatar.src=e}}("#profile-name","#profile-about","#profile-avatar"),m=new class extends s{constructor(e){super(e),this._popupImage=this._popup.querySelector("#popup-image"),this._popupCaption=this._popup.querySelector("#popup-caption")}open(e,t){super.open(),this._setPopupContent(e)}_setPopupContent(e){const t=e.currentTarget.querySelector(".element__image"),s=e.currentTarget.querySelector(".element__caption-text");this._popupImage.src=t.src,this._popupImage.alt="Enlarged ".concat(t.alt),this._popupCaption.textContent=s.textContent}}(".image-popup"),v=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderer(e){const t=this._renderer(e);this.addItem(t)}addItem(e){this._container.prepend(e)}}({renderer:t=>{const s=new e(t,".elements__list-item",p.getUserId(),(e=>{m.open(e)}),(e=>{const t=e.currentTarget;y.open(),y.setConfirmHandler((()=>{const e=s._cardId;_(!0,".delete-popup"),d.deleteCard(e).then((()=>{t.remove(),y.close()})).catch((e=>d.reportError(e))).finally((()=>{_(!1,".delete-popup")}))})),y.setEventListeners()}),(()=>{s.isLiked()?d.changeCardLike(s._cardId,"DELETE").then((e=>{s.updateLikes(e.likes)})).catch((e=>d.reportError(e))):d.changeCardLike(s._cardId,"PUT").then((e=>{s.updateLikes(e.likes)})).catch((e=>d.reportError(e)))}));return s.generateCard()}},".elements__list"),f=new r(".edit-popup",((e,t)=>{e.preventDefault(),_(!0,".edit-popup"),d.editProfileInfo(t).then((e=>{p.setUserInfo(e)})).catch((e=>d.reportError(e))).finally((()=>{_(!1,".edit-popup")})),f.close()})),E=new r(".avatar-popup",((e,t)=>{e.preventDefault(),_(!0,".avatar-popup"),d.editProfilePicture(t).then((e=>{p.setUserAvatar(e.avatar),E.close()})).catch((e=>d.reportError(e))).finally((()=>{_(!1,".avatar-popup")}))})),C=new r(".add-popup",((e,t)=>{e.preventDefault(),_(!0,".add-popup"),d.addNewCard(t).then((e=>{v.renderer(e,p.getUserId())})).catch((e=>d.reportError(e))).finally((()=>{_(!1,".add-popup")})),C.close()})),y=new class extends s{constructor(e,t){super(e),this._confirmButton=this._popup.querySelector(".confirm-button")}setConfirmHandler(e){this._handleConfirm=e}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",this._handleConfirm)}removeEventListeners(){super.removeEventListeners(),this._confirmButton.removeEventListener("click",this._handleConfirm)}}(".delete-popup");n.addEventListener("click",(()=>{var e;e=p.getUserInfo(),o.name.value=e.name,o.about.value=e.about,f.open(),u()})),i.addEventListener("click",(()=>{E.open(),u()})),a.addEventListener("click",(()=>{C.open(),u()})),c.forEach((e=>{const s=new t(h,e);l.push({validator:s,id:e.id}),s.enableValidation()})),d.getAllInfo().then((e=>{const t=e[0],s=e[1];p.saveUserId(t._id),p.setUserInfo(t),p.setUserAvatar(t.avatar),s.slice().reverse().forEach((e=>{v.renderer(e,t._id)}))})).catch((e=>d.reportError(e)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,